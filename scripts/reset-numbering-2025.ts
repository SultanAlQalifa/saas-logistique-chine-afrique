#!/usr/bin/env tsx
/**
 * Script de reset des num√©rotations pour production 2025
 * Usage: npm run reset:numbering
 */

import { executeProductionReset, NumberingResetService } from '../lib/numbering-reset';

async function main() {
  console.log('üî¢ RESET NUM√âROTATIONS PRODUCTION 2025');
  console.log('=====================================');
  
  try {
    // Confirmation de s√©curit√©
    if (process.env.NODE_ENV === 'production') {
      console.log('‚ö†Ô∏è  ATTENTION: Ex√©cution en mode PRODUCTION');
      console.log('üìã S√©ries qui seront reset√©es:');
      console.log('   - Factures (INV-2025-XXXXXX)');
      console.log('   - Devis (DEV-2025-XXXXXX)');
      console.log('   - Tracking (NM-2025-XXXXXXXX)');
      console.log('   - Re√ßus (REC-2025-XXXXXX)');
      console.log('   - Contrats (CTR-2025-XXXXXX)');
      console.log('');
    }

    // Ex√©cuter le reset
    const report = await executeProductionReset();
    
    // Afficher le rapport
    console.log('');
    console.log('üìä RAPPORT DE RESET');
    console.log('==================');
    console.log(`‚è∞ Timestamp: ${report.timestamp}`);
    console.log(`üë§ Ex√©cut√© par: ${report.resetBy}`);
    console.log(`üíæ Backup cr√©√©: ${report.backupCreated ? '‚úÖ' : '‚ùå'}`);
    console.log(`‚úÖ Succ√®s: ${report.success ? '‚úÖ' : '‚ùå'}`);
    console.log(`üî¢ S√©ries reset√©es: ${report.series.length}`);
    
    if (report.errors.length > 0) {
      console.log('');
      console.log('‚ùå ERREURS:');
      report.errors.forEach(error => console.log(`   - ${error}`));
    }
    
    // Test des num√©ros g√©n√©r√©s
    if (report.success) {
      console.log('');
      console.log('üß™ TEST G√âN√âRATION NUM√âROS');
      console.log('==========================');
      
      const testTypes = ['invoice', 'quote', 'tracking', 'receipt', 'contract'];
      for (const type of testTypes) {
        try {
          const nextNumber = await NumberingResetService.getNextNumber(type);
          console.log(`${type.padEnd(10)}: ${nextNumber}`);
        } catch (error) {
          console.error(`‚ùå Erreur ${type}:`, error);
        }
      }
    }
    
    console.log('');
    console.log(report.success ? '‚úÖ RESET TERMIN√â AVEC SUCC√àS' : '‚ùå RESET √âCHOU√â');
    
    process.exit(report.success ? 0 : 1);
    
  } catch (error) {
    console.error('üí• Erreur fatale:', error);
    process.exit(1);
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  main();
}

export { main as resetNumbering2025 };
