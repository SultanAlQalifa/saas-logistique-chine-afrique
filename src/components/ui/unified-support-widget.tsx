'use client'

import { useState, useRef, useEffect } from 'react'
import { MessageSquare, X, Send, Phone, Mail, ExternalLink, AlertCircle, Clock, CheckCircle, User, Bot, FileText, Download, Paperclip, MessageCircle, HelpCircle, Plus, Maximize2, Minimize2, RotateCcw } from 'lucide-react'
import WhatsAppWidgetInterface from '@/components/whatsapp/WhatsAppWidgetInterface'
import { WidgetDeepLink } from '@/lib/widget-deep-link'
import OpenAIService from '@/lib/openai'

interface Message {
  id: number
  sender: string
  message: string
  time: string
  type: 'bot' | 'user' | 'agent'
  suggestions?: string[]
  actions?: Array<{
    type: string
    label: string
    data?: any
  }>
}

interface SupportWidgetProps {
  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left'
}

export function UnifiedSupportWidget({ 
  position = 'bottom-right'
}: SupportWidgetProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [isMinimized, setIsMinimized] = useState(false)
  const [activeTab, setActiveTab] = useState<'chat' | 'tickets' | 'contact' | 'whatsapp'>('chat')
  const [activeChannel, setActiveChannel] = useState<'web' | 'whatsapp'>('web')
  const [whatsappLinked, setWhatsappLinked] = useState(false)
  const [whatsappPhone, setWhatsappPhone] = useState('')
  const [showWhatsAppLinking, setShowWhatsAppLinking] = useState(false)
  const [otpCode, setOtpCode] = useState('')
  const [otpSent, setOtpSent] = useState(false)
  const [linkingStep, setLinkingStep] = useState<'phone' | 'otp' | 'success'>('phone')
  const [newMessage, setNewMessage] = useState('')
  const deepLink = useRef<WidgetDeepLink | null>(null)
  const [chatMessages, setChatMessages] = useState<Message[]>([
    {
      id: 1,
      sender: 'bot',
      message: 'Bonjour ! Je suis votre assistant IA. Comment puis-je vous aider aujourd\'hui ?',
      time: '14:30',
      type: 'bot'
    }
  ])
  const [isTyping, setIsTyping] = useState(false)
  const [showNewTicket, setShowNewTicket] = useState(false)
  const [newTicket, setNewTicket] = useState({ title: '', description: '', priority: 'medium' })
  
  // Options pr√©d√©finies pour les titres de tickets
  const ticketTitleOptions = [
    'Probl√®me de livraison',
    'Retard de colis',
    'Colis endommag√©',
    'Erreur de facturation',
    'Modification d\'adresse',
    'Demande de remboursement',
    'Question sur les tarifs',
    'Probl√®me de suivi',
    'R√©clamation qualit√©',
    'Demande d\'information',
    'Probl√®me technique plateforme',
    'Autre (pr√©ciser en description)'
  ]
  const chatContainerRef = useRef<HTMLDivElement>(null)

  // Fonction pour forcer le scroll vers le bas
  const scrollToBottom = () => {
    if (chatContainerRef.current) {
      const container = chatContainerRef.current
      // Force scroll imm√©diat sans animation
      container.scrollTop = container.scrollHeight
    }
  }

  // Scroll automatique apr√®s chaque changement de messages
  useEffect(() => {
    const scrollToEnd = () => {
      if (chatContainerRef.current) {
        const container = chatContainerRef.current
        container.scrollTop = container.scrollHeight
      }
    }
    
    // Attendre que le DOM soit mis √† jour
    setTimeout(() => {
      scrollToEnd()
      // Forcer plusieurs tentatives
      setTimeout(scrollToEnd, 10)
      setTimeout(scrollToEnd, 50)
      setTimeout(scrollToEnd, 100)
      setTimeout(scrollToEnd, 200)
      setTimeout(scrollToEnd, 500)
    }, 0)
  }, [chatMessages])

  // Scroll sp√©cifique pour l'indicateur de frappe
  useEffect(() => {
    if (isTyping && chatContainerRef.current) {
      const container = chatContainerRef.current
      setTimeout(() => {
        container.scrollTop = container.scrollHeight
      }, 100)
    }
  }, [isTyping])

  // Charger les messages depuis localStorage au d√©marrage
  useEffect(() => {
    const savedMessages = localStorage.getItem('support-chat-messages')
    if (savedMessages) {
      try {
        const parsedMessages = JSON.parse(savedMessages)
        if (parsedMessages.length > 0) {
          setChatMessages(parsedMessages)
        }
      } catch (error) {
        console.error('Erreur lors du chargement des messages:', error)
      }
    }
  }, [])

  // Sauvegarder les messages dans localStorage (√©viter la sauvegarde du message initial)
  useEffect(() => {
    scrollToBottom()
  }, [chatMessages])

  // Initialiser le deep-link listener
  useEffect(() => {
    if (typeof window !== 'undefined') {
      deepLink.current = WidgetDeepLink.getInstance()
      
      const handleDeepLink = (params: any) => {
        console.log('Deep-link d√©tect√©:', params)
        
        // Ouvrir automatiquement le widget
        setIsOpen(true)
        
        // D√©finir le canal actif
        if (params.chan === 'wa') {
          setActiveChannel('whatsapp')
        }
        
        // G√©n√©rer un message contextuel
        const contextualMessage = deepLink.current?.generateContextualMessage(params)
        if (contextualMessage) {
          const botMessage: Message = {
            id: Date.now(),
            sender: 'bot',
            message: contextualMessage.message,
            time: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
            type: 'bot',
            suggestions: contextualMessage.suggestions,
            actions: contextualMessage.actions
          }
          
          setChatMessages(prev => [...prev, botMessage])
        }
        
        // Logger l'√©v√©nement
        console.log('Deep-link trait√©:', params)
      }
      
      deepLink.current.addListener(handleDeepLink)
      
      return () => {
        if (deepLink.current) {
          deepLink.current.removeListener(handleDeepLink)
        }
      }
    }
  }, [])

  // Sauvegarder les messages dans localStorage (√©viter la sauvegarde du message initial)
  useEffect(() => {
    if (chatMessages.length > 1 || (chatMessages.length === 1 && chatMessages[0].id !== 1)) {
      localStorage.setItem('support-chat-messages', JSON.stringify(chatMessages))
    }
  }, [chatMessages])

  // Mock data pour les tickets existants
  const myTickets = [
    {
      id: 'TK-001',
      title: 'Probl√®me de livraison colis CO-001234',
      status: 'open',
      priority: 'high',
      created: '2024-01-15',
      lastUpdate: '2024-01-16',
      agent: 'Sarah Diop'
    },
    {
      id: 'TK-002', 
      title: 'Question sur les tarifs Chine-S√©n√©gal',
      status: 'resolved',
      priority: 'medium',
      created: '2024-01-10',
      lastUpdate: '2024-01-12',
      agent: 'Moussa Kane'
    }
  ]

  const positionClasses = {
    'bottom-right': 'bottom-6 right-6',
    'bottom-left': 'bottom-6 left-6',
    'top-right': 'top-6 right-6',
    'top-left': 'top-6 left-6'
  }

  const widgetPositionClasses = {
    'bottom-right': 'bottom-24 right-6',
    'bottom-left': 'bottom-24 left-6',
    'top-right': 'top-24 right-6',
    'top-left': 'top-24 left-6'
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'bg-red-100 text-red-800'
      case 'in_progress': return 'bg-yellow-100 text-yellow-800'
      case 'resolved': return 'bg-green-100 text-green-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'open': return <AlertCircle className="h-4 w-4" />
      case 'in_progress': return <Clock className="h-4 w-4" />
      case 'resolved': return <CheckCircle className="h-4 w-4" />
      default: return <AlertCircle className="h-4 w-4" />
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'text-red-600'
      case 'medium': return 'text-yellow-600'
      case 'low': return 'text-green-600'
      default: return 'text-gray-600'
    }
  }

  const handleSendMessage = async () => {
    if (newMessage.trim()) {
      const userMessage: Message = {
        id: chatMessages.length + 1,
        sender: 'user',
        message: newMessage,
        time: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
        type: 'user'
      }
      
      setChatMessages(prev => [...prev, userMessage])
      const messageContent = newMessage
      setNewMessage('')
      setIsTyping(true)
      
      // Logique de r√©ponse locale (sans API)
      setTimeout(() => {
        let botMessage = ''
        let responseType: 'bot' | 'agent' = 'bot'
        
        const lowerMessage = messageContent.toLowerCase()
        
        // V√©rifier si l'utilisateur demande un humain
        const wantsHuman = lowerMessage.includes('humain') || 
                          lowerMessage.includes('agent') || 
                          lowerMessage.includes('personne') ||
                          lowerMessage.includes('parler √† quelqu\'un') ||
                          lowerMessage.includes('support humain')
        
        if (wantsHuman) {
          botMessage = 'üë®‚Äçüíº Je comprends parfaitement votre souhait de parler √† un agent humain. C\'est avec plaisir que je vous mets en relation avec notre √©quipe support d√©di√©e. Un de nos agents exp√©riment√©s va vous contacter dans les meilleurs d√©lais via WhatsApp ou email. En attendant, je reste √† votre enti√®re disposition pour vous accompagner. Y a-t-il quelque chose de sp√©cifique avec lequel je peux vous aider d√®s maintenant ?'
          responseType = 'agent'
        } else if (lowerMessage.includes('bonjour') || lowerMessage.includes('salut') || lowerMessage.includes('hello') || lowerMessage.includes('bonsoir') || lowerMessage.includes('hey') || lowerMessage.includes('hi') || lowerMessage.includes('bonne journ√©e') || lowerMessage.includes('good morning') || lowerMessage.includes('good evening')) {
          botMessage = 'üëã Bonjour et bienvenue ! C\'est un r√©el plaisir de vous accueillir. Je suis votre assistant personnel NextMove, et je suis l√† pour vous accompagner dans tous vos besoins logistiques. Comment puis-je avoir l\'honneur de vous aider aujourd\'hui ? Je serais ravi de vous renseigner sur vos colis, nos tarifs, ou r√©pondre √† toutes vos questions.'
        } else if (lowerMessage.includes('√ßa va') || lowerMessage.includes('tu vas bien') || lowerMessage.includes('comment allez-vous')) {
          botMessage = 'üòä Je vous remercie infiniment pour cette d√©licate attention ! Je vais tr√®s bien, merci beaucoup. C\'est vraiment un plaisir d\'√™tre √† votre service aujourd\'hui. Je suis enti√®rement d√©vou√© √† vous accompagner dans tous vos besoins logistiques. Avez-vous des questions concernant vos exp√©ditions ou nos services ? Je serais honor√© de pouvoir vous aider.'
        } else if (lowerMessage.includes('colis') || lowerMessage.includes('suivi') || lowerMessage.includes('tracking') || lowerMessage.includes('paquet') || lowerMessage.includes('exp√©dition') || lowerMessage.includes('envoi') || lowerMessage.includes('commande') || lowerMessage.includes('livraison') || lowerMessage.includes('o√π est') || lowerMessage.includes('statut') || lowerMessage.includes('trace') || lowerMessage.includes('localiser')) {
          botMessage = 'üì¶ Ce sera un plaisir de vous accompagner dans le suivi de votre colis ! Je suis l√† pour vous fournir toutes les informations dont vous avez besoin. Pourriez-vous, s\'il vous pla√Æt, me communiquer votre num√©ro de suivi ? Il commence g√©n√©ralement par "CO-" suivi de chiffres. Je m\'empresserai de vous donner toutes les informations sur l\'√©tat de votre exp√©dition.'
        } else if (lowerMessage.includes('tarif') || lowerMessage.includes('prix') || lowerMessage.includes('co√ªt') || lowerMessage.includes('combien') || lowerMessage.includes('montant') || lowerMessage.includes('facture') || lowerMessage.includes('devis') || lowerMessage.includes('estimation') || lowerMessage.includes('budget') || lowerMessage.includes('frais') || lowerMessage.includes('√ßa co√ªte') || lowerMessage.includes('price') || lowerMessage.includes('cost')) {
          botMessage = 'üí∞ C\'est avec grand plaisir que je vais vous accompagner pour conna√Ætre nos tarifs ! Nos prix sont calcul√©s avec la plus grande transparence et d√©pendent du mode de transport (maritime/a√©rien), du poids et du volume de votre exp√©dition. Souhaiteriez-vous que je vous pr√©pare un devis personnalis√© ? Je serais ravi de vous proposer la meilleure solution adapt√©e √† vos besoins.'
        } else if (lowerMessage.includes('livraison') || lowerMessage.includes('d√©lai') || lowerMessage.includes('temps')) {
          botMessage = 'üöö Je serais ravi de vous informer sur nos d√©lais de livraison ! Voici nos diff√©rentes options :\n\n‚Ä¢ **Maritime** : 25-35 jours (id√©al pour optimiser vos co√ªts)\n‚Ä¢ **A√©rien** : 5-7 jours (parfait pour vos urgences)\n‚Ä¢ **Express** : 3-5 jours (notre service premium)\n\nQuel type d\'exp√©dition vous int√©resserait le plus ? Je serais honor√© de vous conseiller la meilleure option selon vos besoins.'
        } else if (lowerMessage.includes('merci') || lowerMessage.includes('thank') || lowerMessage.includes('remercie') || lowerMessage.includes('thanks') || lowerMessage.includes('merci beaucoup') || lowerMessage.includes('je vous remercie') || lowerMessage.includes('grateful') || lowerMessage.includes('appreciate')) {
          botMessage = 'üôè C\'est moi qui vous remercie pour votre confiance ! C\'est un v√©ritable plaisir et un honneur de pouvoir vous aider. N\'h√©sitez surtout pas √† revenir vers moi pour toutes vos questions concernant nos services logistiques. Je reste √† votre enti√®re disposition avec le plus grand plaisir !'
        } else if (lowerMessage.includes('probl√®me') || lowerMessage.includes('souci') || lowerMessage.includes('erreur') || lowerMessage.includes('bug') || lowerMessage.includes('dysfonctionnement') || lowerMessage.includes('panne') || lowerMessage.includes('difficult√©') || lowerMessage.includes('incident') || lowerMessage.includes('ne marche pas') || lowerMessage.includes('ne fonctionne pas') || lowerMessage.includes('issue') || lowerMessage.includes('trouble') || lowerMessage.includes('broken')) {
          botMessage = '‚ö†Ô∏è Je suis sinc√®rement d√©sol√© d\'apprendre que vous rencontrez une difficult√©. Votre satisfaction est notre priorit√© absolue, et je vais faire tout mon possible pour vous aider √† r√©soudre cette situation. Pourriez-vous, s\'il vous pla√Æt, me donner un peu plus de d√©tails sur ce qui vous pr√©occupe ? Je m\'engage √† vous accompagner personnellement ou √† vous orienter vers la personne la plus comp√©tente pour vous aider.'
        } else if (lowerMessage.includes('contact') || lowerMessage.includes('t√©l√©phone') || lowerMessage.includes('email') || lowerMessage.includes('joindre') || lowerMessage.includes('appeler') || lowerMessage.includes('num√©ro') || lowerMessage.includes('mail') || lowerMessage.includes('coordonn√©es') || lowerMessage.includes('adresse') || lowerMessage.includes('phone') || lowerMessage.includes('call') || lowerMessage.includes('reach') || lowerMessage.includes('communicate')) {
          botMessage = 'üìû Ce sera un plaisir de vous communiquer nos coordonn√©es ! Notre √©quipe est √† votre enti√®re disposition :\n\n‚Ä¢ **Email** : support@nextmovecargo.com\n‚Ä¢ **T√©l√©phone** : +221 33 123 45 67\n‚Ä¢ **WhatsApp Business** : disponible 24h/24 pour votre confort\n\nComment pr√©f√©reriez-vous √™tre contact√© ? Nous nous ferons un plaisir de vous r√©pondre dans les meilleurs d√©lais.'
        } else if (lowerMessage.includes('nextmove') || lowerMessage.includes('plateforme') || lowerMessage.includes('saas') || lowerMessage.includes('pr√©sentation') || lowerMessage.includes('qui √™tes-vous')) {
          botMessage = 'üöÄ **NextMove Cargo** - Votre partenaire SaaS logistique en Afrique !\n\n**üéØ Notre Mission :**\nDigitaliser et automatiser la gestion des exp√©ditions en Afrique et √† l\'international. Nous connectons tous les acteurs de la cha√Æne logistique dans un √©cosyst√®me collaboratif.\n\n**üë• Qui utilise NextMove :**\n‚Ä¢ **Entreprises clientes** : Transitaires, transporteurs, logisticiens, compagnies cargo, PME exportatrices\n‚Ä¢ **Agents & employ√©s** : Gestion des exp√©ditions et services\n‚Ä¢ **Clients finaux** : Suivi de colis, devis, support 24/7\n\n**üí° Valeur ajout√©e :**\n‚Ä¢ Digitalisation compl√®te du secteur logistique\n‚Ä¢ R√©duction des co√ªts et d√©lais\n‚Ä¢ Simplicit√© d\'usage m√™me pour les TPE\n‚Ä¢ Premier SaaS logistique local en Afrique de l\'Ouest\n\n**üåç Vision :** Devenir le leader africain du SaaS logistique collaboratif !'
        } else if (lowerMessage.includes('abonnement') || lowerMessage.includes('plan') || lowerMessage.includes('prix') && (lowerMessage.includes('entreprise') || lowerMessage.includes('soci√©t√©'))) {
          botMessage = 'üíº **Nos abonnements entreprises** (paiements mensuels) :\n\n**üì¶ Basic - 30 000 FCFA/mois :**\n‚Ä¢ Gestion de base des colis\n‚Ä¢ Facturation simple\n‚Ä¢ Support standard\n‚Ä¢ Id√©al pour les TPE\n\n**üöÄ Pro - 75 000 FCFA/mois :**\n‚Ä¢ Fonctionnalit√©s avanc√©es\n‚Ä¢ API d\'int√©gration\n‚Ä¢ Analytics d√©taill√©es\n‚Ä¢ Support prioritaire\n\n**‚≠ê Premium - 150 000 FCFA/mois :**\n‚Ä¢ Toutes les fonctionnalit√©s\n‚Ä¢ White-label personnalis√©\n‚Ä¢ Support d√©di√©\n‚Ä¢ Statistiques avanc√©es\n\n**üí∞ Avantages :**\n‚Ä¢ Paiements fractionn√©s possibles\n‚Ä¢ Commission 0% (conforme aux principes islamiques)\n‚Ä¢ 1 mois gratuit pour tester\n\nQuel plan correspond le mieux √† vos besoins ?'
        } else if (lowerMessage.includes('fonctionnalit√©') || lowerMessage.includes('service') || lowerMessage.includes('que fait') || lowerMessage.includes('capacit√©')) {
          botMessage = '‚öôÔ∏è **Fonctionnalit√©s principales NextMove Cargo :**\n\n**üì¶ Gestion des colis :**\n‚Ä¢ Calcul au kg (a√©rien) ou CBM (maritime)\n‚Ä¢ Tracking num√©ro alphanum√©rique\n‚Ä¢ Preuve de livraison (POD) avec photo et signature\n\n**üí∞ Facturation & Paiements :**\n‚Ä¢ Devis et factures automatis√©s\n‚Ä¢ Paiement en ligne s√©curis√©\n‚Ä¢ Int√©gration Orange Money, Wave, PayPal\n\n**ü§ñ IA & Support :**\n‚Ä¢ Assistant IA 24/7 (c\'est moi !)\n‚Ä¢ Support client multilingue\n‚Ä¢ R√©ponses automatiques intelligentes\n\n**üì± Notifications :**\n‚Ä¢ Web, WhatsApp, Email, SMS\n‚Ä¢ Suivi en temps r√©el\n‚Ä¢ Alertes personnalis√©es\n\n**üé® Personnalisation :**\n‚Ä¢ Logos, couleurs, favicon\n‚Ä¢ White-label complet\n‚Ä¢ Blog & communaut√© int√©gr√©s\n\nQuelle fonctionnalit√© vous int√©resse le plus ?'
        } else if (lowerMessage.includes('march√©') || lowerMessage.includes('afrique') || lowerMessage.includes('concurrence') || lowerMessage.includes('leader')) {
          botMessage = 'üåç **NextMove Cargo sur le march√© africain :**\n\n**üìä Contexte du march√© :**\n‚Ä¢ L\'Afrique de l\'Ouest conna√Æt une forte croissance des √©changes commerciaux\n‚Ä¢ March√© du cargo : plusieurs milliards FCFA/an\n‚Ä¢ Secteur peu digitalis√© = opportunit√© √©norme\n\n**üéØ Public cible :**\n‚Ä¢ >50 000 entreprises logistiques en Afrique de l\'Ouest\n‚Ä¢ 3 000 √† 5 000 entreprises au S√©n√©gal\n‚Ä¢ PME exportatrices/importatrices\n‚Ä¢ Startups logistiques locales\n\n**üèÜ Notre avantage :**\n‚Ä¢ **Aucun concurrent direct** sur le SaaS logistique local\n‚Ä¢ Positionnement "First Mover"\n‚Ä¢ Approche collaborative (pas comp√©titive)\n‚Ä¢ Adaptation aux r√©alit√©s locales\n\n**üìà Objectifs 6 mois :**\n‚Ä¢ 100-250 entreprises abonn√©es\n‚Ä¢ 2 000-10 000 utilisateurs finaux\n‚Ä¢ Extension vers toute l\'Afrique\n\nRejoignez la r√©volution logistique africaine !'
        } else if (lowerMessage.includes('cbm') || lowerMessage.includes('m¬≥') || lowerMessage.includes('volume') || lowerMessage.includes('calcul par cbm') || lowerMessage.includes('m√®tre cube') || lowerMessage.includes('calcul de cbm')) {
          botMessage = 'üìè Excellente question ! Le **CBM (Cubic Meter)** ou **m¬≥** est une unit√© de mesure du volume utilis√©e en logistique :\n\n**üßÆ Comment calculer le CBM :**\n‚Ä¢ **Formule** : Longueur √ó Largeur √ó Hauteur (en m√®tres)\n‚Ä¢ **Exemple** : Un colis de 1,2m √ó 0,8m √ó 0,5m = 0,48 m¬≥\n\n**üí∞ Pourquoi c\'est important :**\n‚Ä¢ Le transport maritime se facture au **volume (CBM)**\n‚Ä¢ Tarif : 650 FCFA/m¬≥ (Standard) ou 850 FCFA/m¬≥ (Express)\n‚Ä¢ Plus √©conomique pour les marchandises volumineuses mais l√©g√®res\n\n**‚öñÔ∏è CBM vs Poids :**\n‚Ä¢ **Maritime** : Facturation au volume (CBM)\n‚Ä¢ **A√©rien** : Facturation au poids (kg)\n\n**üéØ Conseil pratique :**\nSi votre colis fait plus de 167 kg par m¬≥, choisissez le maritime. Sinon, comparez avec l\'a√©rien !\n\nAvez-vous des dimensions sp√©cifiques √† calculer ?'
        } else if (lowerMessage.includes('diff√©rence') || lowerMessage.includes('basic vs pro') || lowerMessage.includes('pro vs premium') || lowerMessage.includes('comparaison plan')) {
          botMessage = 'üìä **Comparaison d√©taill√©e de nos plans :**\n\n**üì¶ Basic (30 000 FCFA/mois) :**\n‚Ä¢ Gestion simple des colis, factures et suivi\n‚Ä¢ Fonctionnalit√©s de base\n‚Ä¢ Support standard\n‚Ä¢ Id√©al pour d√©buter\n\n**üöÄ Pro (75 000 FCFA/mois) :**\n‚Ä¢ API d\'int√©gration\n‚Ä¢ Automatisations avanc√©es\n‚Ä¢ Rapports d√©taill√©s\n‚Ä¢ Analytics approfondies\n‚Ä¢ Support prioritaire\n\n**‚≠ê Premium (150 000 FCFA/mois) :**\n‚Ä¢ Personnalisation totale (white-label)\n‚Ä¢ Branding complet\n‚Ä¢ Statistiques premium\n‚Ä¢ Support d√©di√©\n‚Ä¢ Toutes les fonctionnalit√©s\n\n**üí∞ Avantages communs :**\n‚Ä¢ Paiements fractionn√©s possibles\n‚Ä¢ Commission 0% (conforme principes islamiques)\n‚Ä¢ 1 mois gratuit d\'essai\n\nQuel plan correspond √† vos besoins ?'
        } else if (lowerMessage.includes('commission') || lowerMessage.includes('frais suppl√©mentaire') || lowerMessage.includes('co√ªt cach√©') || lowerMessage.includes('riiba')) {
          botMessage = 'üí∞ **Politique tarifaire transparente NextMove :**\n\n**‚úÖ Aucun frais cach√© :**\n‚Ä¢ Tarifs clairs et transparents\n‚Ä¢ Pas de commission sur les transactions\n‚Ä¢ **Commission 0%** (conforme aux principes islamiques - pas de riiba)\n\n**üí≥ Paiements flexibles :**\n‚Ä¢ **Paiements fractionn√©s** possibles\n‚Ä¢ Facilit√©s de paiement adapt√©es\n‚Ä¢ Respect des principes √©thiques\n\n**üéÅ Avantages inclus :**\n‚Ä¢ 1 mois gratuit d\'essai\n‚Ä¢ Formation gratuite\n‚Ä¢ Support technique inclus\n‚Ä¢ Mises √† jour automatiques\n\n**üìä Tarification simple :**\n‚Ä¢ Basic : 30 000 FCFA/mois (tout inclus)\n‚Ä¢ Pro : 75 000 FCFA/mois (tout inclus)\n‚Ä¢ Premium : 150 000 FCFA/mois (tout inclus)\n\n**ü§ù Notre engagement :**\nTransparence totale, √©thique commerciale et respect des valeurs africaines !'
        } else if (lowerMessage.includes('qui peut utiliser') || lowerMessage.includes('public cible') || lowerMessage.includes('utilisateurs') || lowerMessage.includes('clients type')) {
          botMessage = 'üë• **Qui peut utiliser NextMove Cargo ?**\n\n**üè¢ Entreprises principales :**\n‚Ä¢ **Transitaires & logisticiens** : Gestion compl√®te des exp√©ditions\n‚Ä¢ **Compagnies transport** : Maritime, a√©rien, routier\n‚Ä¢ **PME exportatrices/importatrices** : Simplification des processus\n‚Ä¢ **Entreprises e-commerce** : Int√©gration logistique\n\n**üë§ Utilisateurs finaux :**\n‚Ä¢ **Clients particuliers** : Suivi de colis en temps r√©el\n‚Ä¢ **Agents & employ√©s** : Outils de gestion quotidienne\n‚Ä¢ **Partenaires** : R√©seau collaboratif\n\n**üéØ Secteurs d\'activit√© :**\n‚Ä¢ Import/Export\n‚Ä¢ E-commerce\n‚Ä¢ Distribution\n‚Ä¢ Manufacturing\n‚Ä¢ Services logistiques\n\n**üíº Tailles d\'entreprises :**\n‚Ä¢ TPE (tr√®s petites entreprises)\n‚Ä¢ PME (petites et moyennes entreprises)\n‚Ä¢ Grandes entreprises\n‚Ä¢ Startups logistiques\n\nNextMove s\'adapte √† tous les profils !'
        } else if (lowerMessage.includes('kg') || lowerMessage.includes('kilogramme') || lowerMessage.includes('poids') || lowerMessage.includes('calcul par kg') || lowerMessage.includes('calcul au poids')) {
          botMessage = '‚öñÔ∏è Excellente question ! Le **kg (kilogramme)** est l\'unit√© de mesure du poids utilis√©e pour le transport a√©rien :\n\n**üßÆ Comment fonctionne le calcul au kg :**\n‚Ä¢ **Principe** : Facturation bas√©e sur le poids total de votre colis\n‚Ä¢ **Exemple** : Un colis de 25 kg co√ªtera 25 √ó tarif/kg\n\n**üí∞ Nos tarifs a√©riens :**\n‚Ä¢ **A√©rien Standard** : 5 200 FCFA/kg (5-7 jours)\n‚Ä¢ **A√©rien Express** : 8 500 FCFA/kg (3-5 jours)\n‚Ä¢ Id√©al pour les marchandises lourdes mais compactes\n\n**‚öñÔ∏è Poids vs Volume :**\n‚Ä¢ **A√©rien** : Facturation au poids (kg)\n‚Ä¢ **Maritime** : Facturation au volume (CBM)\n\n**üéØ Conseil pratique :**\nSi votre colis fait moins de 167 kg par m¬≥, l\'a√©rien peut √™tre plus √©conomique. Pour les objets lourds et compacts, c\'est souvent le meilleur choix !\n\n**üì¶ Exemples typiques :**\n‚Ä¢ Documents, livres, √©chantillons\n‚Ä¢ Produits √©lectroniques compacts\n‚Ä¢ Pi√®ces d√©tach√©es m√©talliques\n\nQuel est le poids approximatif de votre envoi ?'
        } else {
          botMessage = 'ü§ñ Je suis l\'agent virtuel officiel de NextMove Cargo. Je vais transmettre votre demande √† notre support humain. Un agent vous contactera rapidement pour vous fournir une r√©ponse pr√©cise.\n\nüìû **Contact direct :**\n‚Ä¢ Email : support@nextmovecargo.com\n‚Ä¢ T√©l√©phone : +221 33 123 45 67\n‚Ä¢ WhatsApp Business : 24h/24\n\nEn attendant, n\'h√©sitez pas √† me poser des questions sur nos tarifs (30 000 √† 150 000 FCFA/mois), nos services de suivi de colis, ou nos modes de transport.'
        }

        const botResponse = {
          id: Date.now(),
          sender: responseType,
          message: botMessage,
          time: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
          type: responseType
        }
        
        setChatMessages(prev => [...prev, botResponse])
        setIsTyping(false)
      }, 1000)
    }
  }

  const handleCreateTicket = () => {
    if (newTicket.title && newTicket.description) {
      // Logique pour cr√©er un nouveau ticket
      console.log('Nouveau ticket:', newTicket)
      setNewTicket({ title: '', description: '', priority: 'medium' })
      setShowNewTicket(false)
    }
  }

  const handleAction = (action: { type: string; label: string; data?: any; }) => {
    console.log('Action d√©clench√©e:', action)
    
    switch (action.type) {
      case 'view_shipment':
        // Rediriger vers la page de suivi
        if (action.data?.shipmentId) {
          window.open(`/dashboard/shipments/${action.data.shipmentId}`, '_blank')
        }
        break
      
      case 'download_invoice':
        // T√©l√©charger la facture
        if (action.data?.invoiceId) {
          window.open(`/api/invoices/${action.data.invoiceId}/download`, '_blank')
        }
        break
      
      case 'contact_agent':
        // Ouvrir le formulaire de contact ou escalader
        setActiveTab('contact')
        break
      
      case 'create_quote':
        // Rediriger vers la cr√©ation de devis
        window.open('/dashboard/quotes/new', '_blank')
        break

      case 'link_whatsapp':
        // Ouvrir le flow de liaison WhatsApp
        setShowWhatsAppLinking(true)
        setLinkingStep('phone')
        break

      case 'invoices':
        // Envoyer directement le message pour voir les factures
        const invoiceMessage: Message = {
          id: Date.now(),
          sender: 'user',
          message: 'Voir mes factures',
          time: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
          type: 'user'
        }
        setChatMessages(prev => [...prev, invoiceMessage])
        setNewMessage('Voir mes factures')
        setTimeout(() => handleSendMessage(), 100)
        break

      case 'documentation':
        // Envoyer directement le message pour la documentation
        const docMessage: Message = {
          id: Date.now(),
          sender: 'user',
          message: 'Voir la documentation',
          time: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
          type: 'user'
        }
        setChatMessages(prev => [...prev, docMessage])
        setNewMessage('Voir la documentation')
        setTimeout(() => handleSendMessage(), 100)
        break
      
      default:
        console.log('Action non reconnue:', action.type)
    }
  }

  const handleWhatsAppLinking = async () => {
    if (linkingStep === 'phone') {
      if (!whatsappPhone) {
        alert('Veuillez saisir votre num√©ro de t√©l√©phone')
        return
      }

      try {
        const response = await fetch('/api/whatsapp/send-otp', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ phoneNumber: whatsappPhone })
        })

        const data = await response.json()
        
        if (data.success) {
          setOtpSent(true)
          setLinkingStep('otp')
        } else {
          alert(data.message || 'Erreur lors de l\'envoi du code')
        }
      } catch (error) {
        console.error('Erreur liaison WhatsApp:', error)
        alert('Erreur technique. R√©essayez plus tard.')
      }
    } else if (linkingStep === 'otp') {
      if (!otpCode) {
        alert('Veuillez saisir le code de v√©rification')
        return
      }

      try {
        const response = await fetch('/api/whatsapp/verify-otp', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            phoneNumber: whatsappPhone,
            otp: otpCode
          })
        })

        const data = await response.json()
        
        if (data.success) {
          setWhatsappLinked(true)
          setLinkingStep('success')
          setActiveChannel('whatsapp')
          setTimeout(() => {
            setShowWhatsAppLinking(false)
          }, 2000)
        } else {
          alert(data.message || 'Code de v√©rification incorrect')
        }
      } catch (error) {
        console.error('Erreur v√©rification OTP:', error)
        alert('Erreur technique. R√©essayez plus tard.')
      }
    }
  }

  const tabs = [
    { id: 'chat' as const, label: 'Chat Support', icon: MessageSquare },
    { id: 'tickets' as const, label: 'Mes Tickets', icon: Plus },
    { id: 'contact' as const, label: 'Nous Contacter', icon: Phone },
    { id: 'whatsapp' as const, label: 'Chat WhatsApp', icon: MessageCircle },
  ]

  if (!isOpen) {
    return (
      <div className={`fixed ${positionClasses[position]} z-50`}>
        <div className="relative">
          {/* Main Button */}
          <button
            onClick={() => setIsOpen(true)}
            className="w-14 h-14 bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110 flex items-center justify-center group"
            title="Ouvrir le Support"
          >
            <HelpCircle className="w-6 h-6" />
          </button>
          
          {/* Notification Badge */}
          <div className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center">
            <span className="text-xs text-white font-bold">!</span>
          </div>

          {/* Tooltip */}
          <div className="absolute bottom-full right-0 mb-2 opacity-0 group-hover:opacity-100 transition-all duration-300 pointer-events-none">
            <div className="bg-gray-900 text-white text-sm px-3 py-2 rounded-lg whitespace-nowrap">
              üí¨ Support - Disponible 24/7
            </div>
            <div className="absolute top-full right-4 -mt-1">
              <div className="w-2 h-2 bg-gray-900 transform rotate-45"></div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <>
      {/* Support Widget Window */}
      <div className={`fixed ${widgetPositionClasses[position]} z-40 ${isMinimized ? 'w-48' : 'w-96'} ${isMinimized ? 'h-16' : 'h-[600px]'} transition-all duration-300`}>
        <div className="bg-white rounded-2xl shadow-2xl border border-gray-200 h-full flex flex-col overflow-hidden">
          {/* Header */}
          <div className={`bg-gradient-to-r from-purple-500 to-pink-600 text-white ${isMinimized ? 'p-1' : 'p-4'} rounded-t-2xl flex items-center justify-between`}>
            <div className="flex items-center gap-3">
              <div className={`bg-white/20 ${isMinimized ? 'p-0.5' : 'p-2'} rounded-lg`}>
                <HelpCircle className={`${isMinimized ? 'h-3 w-3' : 'h-5 w-5'}`} />
              </div>
              {!isMinimized && (
                <div>
                  <h3 className="font-bold text-sm">Mon Support</h3>
                  <div className="flex items-center gap-1 text-xs opacity-90">
                    <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                    <span>Support Actif 24/7</span>
                  </div>
                </div>
              )}
            </div>
            <div className="flex items-center gap-2">
              <button
                onClick={() => setIsMinimized(!isMinimized)}
                className={`text-white hover:bg-white/20 ${isMinimized ? 'h-6 w-6' : 'h-8 w-8'} p-0 rounded-lg flex items-center justify-center transition-colors`}
              >
                {isMinimized ? <Maximize2 className="h-3 w-3" /> : <Minimize2 className="h-4 w-4" />}
              </button>
              <button
                onClick={() => setIsOpen(false)}
                className={`text-white hover:bg-white/20 ${isMinimized ? 'h-6 w-6' : 'h-8 w-8'} p-0 rounded-lg flex items-center justify-center transition-colors`}
              >
                <X className={`${isMinimized ? 'h-3 w-3' : 'h-4 w-4'}`} />
              </button>
            </div>
          </div>

          {/* Widget Content */}
          {!isMinimized && (
            <div className="flex-1 overflow-hidden flex flex-col">
              {/* Navigation par onglets */}
              <div className="border-b border-gray-200 px-4">
                <nav className="-mb-px flex space-x-4">
                  {tabs.map((tab) => {
                    const Icon = tab.icon
                    return (
                      <button
                        key={tab.id}
                        onClick={() => setActiveTab(tab.id)}
                        className={`py-2 px-1 border-b-2 font-medium text-xs flex items-center gap-1 ${
                          activeTab === tab.id
                            ? 'border-purple-500 text-purple-600'
                            : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        <Icon className="h-3 w-3" />
                        {tab.label}
                      </button>
                    )
                  })}
                </nav>
              </div>

              {/* Contenu des onglets */}
              <div className="flex-1 overflow-y-auto">
                {activeTab === 'chat' && (
                  <div className="p-4 flex flex-col h-full">

                    {/* Zone de chat */}
                    <div className="flex-1 border border-gray-200 rounded-lg flex flex-col">
                      {/* Messages */}
                      <div className="flex-1 overflow-y-auto p-2 space-y-2 scroll-smooth min-h-0" ref={chatContainerRef}>
                        {chatMessages.map((msg) => (
                          <div key={msg.id} className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                            <div className={`max-w-[80%] px-3 py-2 rounded-lg break-words text-xs relative ${
                              msg.type === 'user' 
                                ? 'bg-purple-500 text-white' 
                                : msg.type === 'bot'
                                ? 'bg-blue-100 text-blue-900'
                                : 'bg-green-100 text-green-900'
                            }`}>
                              {/* Badge WhatsApp */}
                              {activeChannel === 'whatsapp' && (
                                <div className="absolute -top-1 -right-1 bg-green-500 text-white text-xs px-1 rounded-full">
                                  WA
                                </div>
                              )}
                              
                              <div className="flex items-center gap-1 mb-1">
                                {msg.type === 'bot' && <Bot className="h-3 w-3 flex-shrink-0" />}
                                {msg.type === 'agent' && <User className="h-3 w-3 flex-shrink-0" />}
                                {msg.type === 'user' && <User className="h-3 w-3 flex-shrink-0" />}
                                <span className="text-xs font-medium">
                                  {msg.type === 'bot' ? 'IA NextMove' : msg.type === 'agent' ? 'Agent' : 'Vous'}
                                </span>
                                <span className="text-xs opacity-75">{msg.time}</span>
                                {activeChannel === 'whatsapp' && (
                                  <span className="text-xs opacity-75">üì±</span>
                                )}
                              </div>
                              <div className="text-xs leading-relaxed whitespace-pre-line">{msg.message}</div>
                              
                              {/* Suggestions rapides */}
                              {msg.suggestions && msg.suggestions.length > 0 && (
                                <div className="mt-2 flex flex-wrap gap-1">
                                  {msg.suggestions.map((suggestion, index) => (
                                    <button
                                      key={index}
                                      onClick={() => {
                                        // Envoyer directement le message au lieu de le mettre dans l'input
                                        const userMessage: Message = {
                                          id: Date.now(),
                                          sender: 'user',
                                          message: suggestion,
                                          time: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
                                          type: 'user'
                                        }
                                        setChatMessages(prev => [...prev, userMessage])
                                        setNewMessage(suggestion)
                                        setTimeout(() => handleSendMessage(), 100)
                                      }}
                                      className="px-2 py-1 bg-white bg-opacity-20 hover:bg-opacity-30 rounded text-xs border border-current border-opacity-30 transition-all"
                                    >
                                      {suggestion}
                                    </button>
                                  ))}
                                </div>
                              )}
                              
                              {/* Boutons d'action */}
                              {msg.actions && msg.actions.length > 0 && (
                                <div className="mt-2 space-y-1">
                                  {msg.actions.map((action, index) => (
                                    <button
                                      key={index}
                                      onClick={() => handleAction(action)}
                                      className="w-full px-2 py-1 bg-white bg-opacity-20 hover:bg-opacity-30 rounded text-xs border border-current border-opacity-30 transition-all flex items-center gap-1"
                                    >
                                      {action.type === 'view_shipment' && <ExternalLink className="h-3 w-3" />}
                                      {action.type === 'download_invoice' && <ExternalLink className="h-3 w-3" />}
                                      {action.type === 'contact_agent' && <Phone className="h-3 w-3" />}
                                      {action.type === 'create_quote' && <Plus className="h-3 w-3" />}
                                      {action.label}
                                    </button>
                                  ))}
                                </div>
                              )}
                            </div>
                          </div>
                        ))}
                        
                        {/* Indicateur de frappe */}
                        {isTyping && (
                          <div className="flex justify-start">
                            <div className="max-w-[80%] px-3 py-2 rounded-lg bg-blue-100 text-blue-900">
                              <div className="flex items-center gap-1 mb-1">
                                <Bot className="h-3 w-3 flex-shrink-0" />
                                <span className="text-xs font-medium">IA NextMove</span>
                                <span className="text-xs opacity-75">en train d'√©crire...</span>
                              </div>
                              <div className="flex items-center gap-1">
                                <div className="flex space-x-1">
                                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                                </div>
                              </div>
                            </div>
                          </div>
                        )}
                        <div ref={(el) => {
                          if (el) {
                            el.scrollIntoView({ behavior: 'smooth' })
                          }
                        }} />
                      </div>

                      {/* Actions rapides fixes */}
                      <div className="border-t border-gray-100 px-1 py-0.5 bg-gray-50">
                        <div className="text-xs text-gray-600 mb-0.5 font-medium">Actions rapides :</div>
                        <div className="grid grid-cols-5 gap-0.5">
                          <button
                            onClick={() => {
                              const userMessage: Message = {
                                id: Date.now(),
                                sender: 'user',
                                message: 'Connexion',
                                time: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
                                type: 'user'
                              }
                              setChatMessages(prev => [...prev, userMessage])
                              setNewMessage('Connexion')
                              setTimeout(() => handleSendMessage(), 100)
                            }}
                            className="p-1 bg-yellow-100 hover:bg-yellow-200 rounded text-sm transition-colors flex items-center justify-center"
                            title="Connexion"
                          >
                            üîë
                          </button>
                          <button
                            onClick={() => {
                              const userMessage: Message = {
                                id: Date.now(),
                                sender: 'user',
                                message: 'Suivre mes colis',
                                time: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
                                type: 'user'
                              }
                              setChatMessages(prev => [...prev, userMessage])
                              setNewMessage('Suivre mes colis')
                              setTimeout(() => handleSendMessage(), 100)
                            }}
                            className="p-1 bg-blue-100 hover:bg-blue-200 rounded text-sm transition-colors flex items-center justify-center"
                            title="Suivre mes colis"
                          >
                            üì¶
                          </button>
                          <button
                            onClick={() => {
                              const userMessage: Message = {
                                id: Date.now(),
                                sender: 'user',
                                message: 'Voir mes factures',
                                time: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
                                type: 'user'
                              }
                              setChatMessages(prev => [...prev, userMessage])
                              setNewMessage('Voir mes factures')
                              setTimeout(() => handleSendMessage(), 100)
                            }}
                            className="p-1 bg-green-100 hover:bg-green-200 rounded text-sm transition-colors flex items-center justify-center"
                            title="Voir mes factures"
                          >
                            üí∞
                          </button>
                          <button
                            onClick={() => {
                              const userMessage: Message = {
                                id: Date.now(),
                                sender: 'user',
                                message: 'Cr√©er un devis',
                                time: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
                                type: 'user'
                              }
                              setChatMessages(prev => [...prev, userMessage])
                              setNewMessage('Cr√©er un devis')
                              setTimeout(() => handleSendMessage(), 100)
                            }}
                            className="p-1 bg-purple-100 hover:bg-purple-200 rounded text-sm transition-colors flex items-center justify-center"
                            title="Cr√©er un devis"
                          >
                            üìã
                          </button>
                          <button
                            onClick={() => {
                              const userMessage: Message = {
                                id: Date.now(),
                                sender: 'user',
                                message: 'Documentation',
                                time: new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }),
                                type: 'user'
                              }
                              setChatMessages(prev => [...prev, userMessage])
                              setNewMessage('Documentation')
                              setTimeout(() => handleSendMessage(), 100)
                            }}
                            className="p-1 bg-orange-100 hover:bg-orange-200 rounded text-sm transition-colors flex items-center justify-center"
                            title="Documentation"
                          >
                            üìö
                          </button>
                        </div>
                      </div>

                      {/* Zone de saisie */}
                      <div className="sticky bottom-0 bg-white border-t border-gray-200 p-2 z-10">
                        {activeChannel === 'whatsapp' && !whatsappLinked && (
                          <div className="mb-2 p-2 bg-green-50 border border-green-200 rounded text-xs text-green-700">
                            üì± Liez WhatsApp pour recevoir et envoyer des messages ici m√™me
                            <button 
                              onClick={() => setShowWhatsAppLinking(true)}
                              className="ml-2 underline hover:no-underline"
                            >
                              Lier maintenant
                            </button>
                          </div>
                        )}
                        
                        <div className="flex items-center gap-2">
                          <button 
                            className="p-1 text-gray-400 hover:text-gray-600"
                            onClick={() => {
                              const input = document.createElement('input');
                              input.type = 'file';
                              input.accept = 'image/*,application/pdf,.doc,.docx,.txt';
                              input.onchange = (e) => {
                                const file = (e.target as HTMLInputElement).files?.[0];
                                if (file) {
                                  // Simuler l'upload du fichier
                                  const fileMessage = `üìé Fichier joint: ${file.name} (${(file.size / 1024).toFixed(1)} KB)`;
                                  setNewMessage(fileMessage);
                                }
                              };
                              input.click();
                            }}
                          >
                            <Paperclip className="h-4 w-4" />
                          </button>
                          <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={activeChannel === 'whatsapp' ? "Message via WhatsApp..." : "Tapez votre message..."}
                            className="flex-1 border border-gray-300 rounded-lg px-2 py-1 text-xs focus:outline-none focus:ring-2 focus:ring-purple-500"
                            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                            disabled={activeChannel === 'whatsapp' && !whatsappLinked}
                          />
                          <button
                            onClick={() => {
                              setChatMessages([]);
                              setNewMessage('');
                              setIsTyping(false);
                            }}
                            className="bg-gradient-to-r from-red-500 to-orange-500 hover:from-red-600 hover:to-orange-600 text-white p-1 rounded-lg transition-all duration-200 transform hover:scale-105"
                            title="R√©initialiser la conversation"
                          >
                            <RotateCcw className="h-4 w-4" />
                          </button>
                          <button
                            onClick={handleSendMessage}
                            disabled={!newMessage.trim() || isTyping || (activeChannel === 'whatsapp' && !whatsappLinked)}
                            className="bg-purple-500 text-white p-1 rounded-lg hover:bg-purple-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
                          >
                            <Send className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {activeTab === 'tickets' && (
                  <div className="p-4">
                    {/* Header */}
                    <div className="flex justify-between items-center mb-4">
                      <div>
                        <h3 className="text-sm font-semibold text-gray-900">üé´ Mes Tickets</h3>
                        <p className="text-xs text-gray-600">G√©rez vos demandes</p>
                      </div>
                      <button
                        onClick={() => setShowNewTicket(true)}
                        className="bg-gradient-to-r from-purple-500 to-pink-600 text-white px-2 py-1 rounded-lg text-xs flex items-center gap-1"
                      >
                        <Plus className="h-3 w-3" />
                        Nouveau
                      </button>
                    </div>

                    {/* Formulaire nouveau ticket */}
                    {showNewTicket && (
                      <div className="bg-gray-50 rounded-lg p-3 mb-4 border border-gray-200">
                        <div className="flex justify-between items-center mb-3">
                          <h3 className="text-sm font-semibold">Nouveau ticket</h3>
                          <button
                            onClick={() => setShowNewTicket(false)}
                            className="text-gray-400 hover:text-gray-600"
                          >
                            <X className="h-4 w-4" />
                          </button>
                        </div>
                        
                        <div className="space-y-3">
                          <div>
                            <label className="block text-xs font-medium text-gray-700 mb-1">Titre</label>
                            <select
                              value={newTicket.title}
                              onChange={(e) => setNewTicket(prev => ({...prev, title: e.target.value}))}
                              className="w-full border border-gray-300 rounded-lg px-2 py-1 text-xs focus:outline-none focus:ring-2 focus:ring-purple-500"
                            >
                              <option value="">S√©lectionnez le type de probl√®me</option>
                              {ticketTitleOptions.map((option, index) => (
                                <option key={index} value={option}>
                                  {option}
                                </option>
                              ))}
                            </select>
                          </div>
                          
                          <div>
                            <label className="block text-xs font-medium text-gray-700 mb-1">Description</label>
                            <textarea
                              value={newTicket.description}
                              onChange={(e) => setNewTicket(prev => ({...prev, description: e.target.value}))}
                              rows={3}
                              className="w-full border border-gray-300 rounded-lg px-2 py-1 text-xs focus:outline-none focus:ring-2 focus:ring-purple-500"
                              placeholder="D√©crivez votre probl√®me..."
                            />
                          </div>
                          
                          <div>
                            <label className="block text-xs font-medium text-gray-700 mb-1">Priorit√©</label>
                            <select
                              value={newTicket.priority}
                              onChange={(e) => setNewTicket(prev => ({...prev, priority: e.target.value}))}
                              className="w-full border border-gray-300 rounded-lg px-2 py-1 text-xs focus:outline-none focus:ring-2 focus:ring-purple-500"
                            >
                              <option value="low">Basse</option>
                              <option value="medium">Moyenne</option>
                              <option value="high">Haute</option>
                            </select>
                          </div>
                          
                          <div className="flex gap-2 pt-2">
                            <button
                              onClick={() => setShowNewTicket(false)}
                              className="flex-1 px-3 py-1 border border-gray-300 rounded-lg text-xs text-gray-700 hover:bg-gray-50"
                            >
                              Annuler
                            </button>
                            <button
                              onClick={handleCreateTicket}
                              className="flex-1 px-3 py-1 bg-purple-500 text-white rounded-lg text-xs hover:bg-purple-600"
                            >
                              Cr√©er
                            </button>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Liste des tickets */}
                    <div className="space-y-3">
                      {myTickets.map((ticket) => (
                        <div key={ticket.id} className="bg-gray-50 rounded-lg p-3">
                          <div className="flex items-start justify-between mb-2">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-1">
                                <span className="font-mono text-xs text-gray-500">{ticket.id}</span>
                                <div className={`flex items-center gap-1 px-1 py-0.5 rounded-full text-xs font-medium ${getStatusColor(ticket.status)}`}>
                                  {getStatusIcon(ticket.status)}
                                  {ticket.status === 'open' ? 'Ouvert' : ticket.status === 'in_progress' ? 'En cours' : 'R√©solu'}
                                </div>
                              </div>
                              <h4 className="font-medium text-xs text-gray-900 mb-1">{ticket.title}</h4>
                              <div className="text-xs text-gray-500">
                                <span>Cr√©√© le {ticket.created}</span>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {activeTab === 'whatsapp' && (
                  <div className="space-y-4">
                    {/* Header WhatsApp */}
                    <div className="bg-gradient-to-r from-green-500 to-emerald-600 rounded-lg p-3 text-white">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
                            <MessageCircle className="h-4 w-4" />
                          </div>
                          <div>
                            <h3 className="text-sm font-bold">WhatsApp Business</h3>
                            <p className="text-xs text-green-100">NextMove Support</p>
                          </div>
                        </div>
                        <div className="flex items-center gap-1">
                          <div className="w-2 h-2 bg-green-300 rounded-full animate-pulse"></div>
                          <span className="text-xs">En ligne</span>
                        </div>
                      </div>
                      <div className="text-xs text-green-100">
                        üìû +221 77 123 45 67 ‚Ä¢ 3 agents disponibles ‚Ä¢ Support 24/7
                      </div>
                    </div>

                    {/* Interface WhatsApp compl√®te pour widget */}
                    <WhatsAppWidgetInterface />
                  </div>
                )}

                {activeTab === 'contact' && (
                  <div className="p-4">
                    <div className="flex items-center gap-2 mb-4">
                      <div className="bg-gradient-to-r from-blue-500 to-cyan-600 p-2 rounded-lg">
                        <Phone className="h-4 w-4 text-white" />
                      </div>
                      <div>
                        <h3 className="text-sm font-semibold text-gray-900">üìû Nous Contacter</h3>
                        <p className="text-xs text-gray-600">Diff√©rents moyens de nous joindre</p>
                      </div>
                    </div>

                    <div className="space-y-3">
                      {/* Email */}
                      <div className="border border-gray-200 rounded-lg p-3">
                        <div className="flex items-center gap-2 mb-2">
                          <Mail className="h-4 w-4 text-blue-600" />
                          <h4 className="font-medium text-xs text-gray-900">Email</h4>
                        </div>
                        <p className="text-xs text-gray-600 mb-2">
                          support@nextmovecargo.com<br />
                          R√©ponse sous 2h en moyenne
                        </p>
                        <button 
                          onClick={() => window.open('mailto:support@nextmovecargo.com?subject=Demande de support - NextMove Cargo', '_blank')}
                          className="w-full bg-blue-500 text-white py-1 rounded-lg text-xs hover:bg-blue-600 transition-colors"
                        >
                          Envoyer un email
                        </button>
                      </div>

                      {/* T√©l√©phone */}
                      <div className="border border-gray-200 rounded-lg p-3">
                        <div className="flex items-center gap-2 mb-2">
                          <Phone className="h-4 w-4 text-purple-600" />
                          <h4 className="font-medium text-xs text-gray-900">T√©l√©phone</h4>
                        </div>
                        <p className="text-xs text-gray-600 mb-2">
                          +221 33 123 45 67<br />
                          Lun-Ven: 8h-18h, Sam: 9h-13h
                        </p>
                        <button 
                          onClick={() => window.open('tel:+22133123456', '_self')}
                          className="w-full bg-purple-500 text-white py-1 rounded-lg text-xs hover:bg-purple-600 transition-colors"
                        >
                          Appeler maintenant
                        </button>
                      </div>

                      {/* Horaires */}
                      <div className="bg-gray-50 rounded-lg p-3">
                        <h4 className="font-medium text-xs text-gray-900 mb-2">‚è∞ Horaires de Support</h4>
                        <div className="text-xs text-gray-600 space-y-1">
                          <div className="flex justify-between">
                            <span>Chat & WhatsApp:</span>
                            <span className="font-medium">24h/24 - 7j/7</span>
                          </div>
                          <div className="flex justify-between">
                            <span>T√©l√©phone:</span>
                            <span className="font-medium">Lun-Ven 8h-18h</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Email:</span>
                            <span className="font-medium">R√©ponse sous 2h</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Floating Button when open */}
      <div className={`fixed ${positionClasses[position]} z-50`}>
        <button
          onClick={() => setIsOpen(false)}
          className="w-14 h-14 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110 flex items-center justify-center"
          title="Fermer le Support"
        >
          <X className="w-6 h-6" />
        </button>
      </div>
    </>
  )
}
