import OpenAI from 'openai'
import { RAGKnowledgeBase, RAGResponse } from './rag-knowledge-base'
import { ChatbotTools, ToolExecutionResult } from './chatbot-tools'
import { ChatContextService, ChatContext } from './chatbot-context'

export interface UniversalChatbotResponse {
  message: string
  sources?: Array<{
    title: string
    url: string
    excerpt: string
  }>
  suggestions?: string[]
  actions?: Array<{
    type: string
    label: string
    data?: any
  }>
  toolResults?: ToolExecutionResult[]
  language: 'fr' | 'en'
  confidence: number
}

export interface ChatMessage {
  role: 'system' | 'user' | 'assistant'
  content: string
}

export class UniversalChatbot {
  private static instance: UniversalChatbot
  private openai: OpenAI | null = null
  private ragKB: RAGKnowledgeBase
  private tools: ChatbotTools
  private isDemo: boolean = false

  private constructor() {
    this.ragKB = RAGKnowledgeBase.getInstance()
    this.tools = ChatbotTools.getInstance()
    this.initializeOpenAI()
  }

  static getInstance(): UniversalChatbot {
    if (!UniversalChatbot.instance) {
      UniversalChatbot.instance = new UniversalChatbot()
    }
    return UniversalChatbot.instance
  }

  private async initializeOpenAI() {
    try {
      const apiKey = process.env.OPENAI_API_KEY
      if (apiKey && apiKey.startsWith('sk-')) {
        this.openai = new OpenAI({ apiKey })
        this.isDemo = false
        console.log('OpenAI initialis√© avec cl√© r√©elle')
      } else {
        console.log('OpenAI non configur√© - utilisation des r√©ponses pr√©d√©finies')
      }
    } catch (error) {
      console.error('Erreur initialisation OpenAI:', error)
    }
  }

  async processMessage(
    message: string,
    userId: string,
    conversationHistory: ChatMessage[] = []
  ): Promise<UniversalChatbotResponse> {
    // 1. D√©tection de langue
    const language = this.detectLanguage(message)
    
    // 2. R√©cup√©ration du contexte utilisateur
    const context = await ChatContextService.getFullContext(userId)
    
    // 3. D√©tection d'intention
    const intent = this.analyzeIntent(message, language)
    
    // 4. Traitement selon l'intention
    switch (intent.type) {
      case 'documentation':
        return this.handleDocumentationIntent(message, language)
      
      case 'action':
        return this.handleActionIntent(message, intent, context, language)
      
      case 'question':
        return this.handleQuestionIntent(message, context, conversationHistory, language)
      
      default:
        return this.handleGeneralIntent(message, context, conversationHistory, language)
    }
  }

  private detectLanguage(message: string): 'fr' | 'en' {
    const englishWords = ['hello', 'how', 'what', 'where', 'when', 'why', 'please', 'thank', 'help']
    const frenchWords = ['bonjour', 'comment', 'quoi', 'o√π', 'quand', 'pourquoi', 'merci', 'aide', 'salut']
    
    const lowerMessage = message.toLowerCase()
    const englishCount = englishWords.filter(word => lowerMessage.includes(word)).length
    const frenchCount = frenchWords.filter(word => lowerMessage.includes(word)).length
    
    return englishCount > frenchCount ? 'en' : 'fr'
  }

  private analyzeIntent(message: string, language: 'fr' | 'en'): {
    type: 'documentation' | 'action' | 'question' | 'general'
    confidence: number
    entities: string[]
    actionType?: string
  } {
    const lowerMessage = message.toLowerCase()
    
    // Documentation
    const docKeywords = language === 'fr' 
      ? ['documentation', 'guide', 'manuel', 'aide', 'tutoriel', 'comment faire']
      : ['documentation', 'guide', 'manual', 'help', 'tutorial', 'how to']
    
    if (docKeywords.some(kw => lowerMessage.includes(kw))) {
      return { type: 'documentation', confidence: 0.9, entities: [] }
    }
    
    // Actions
    const actionPatterns = {
      register: language === 'fr' ? ['inscription', 'cr√©er compte', 'enregistrer'] : ['register', 'sign up', 'create account'],
      login: language === 'fr' ? ['connexion', 'connecter', 'login'] : ['login', 'sign in', 'connect'],
      track: language === 'fr' ? ['suivi', 'suivre', 'track'] : ['track', 'trace', 'follow'],
      invoice: language === 'fr' ? ['facture', 't√©l√©charger facture'] : ['invoice', 'download invoice'],
      quote: language === 'fr' ? ['devis', 'tarif', 'prix'] : ['quote', 'price', 'rate']
    }
    
    for (const [action, keywords] of Object.entries(actionPatterns)) {
      if (keywords.some(kw => lowerMessage.includes(kw))) {
        return { 
          type: 'action', 
          confidence: 0.8, 
          entities: this.extractEntities(message),
          actionType: action
        }
      }
    }
    
    // Questions
    const questionWords = language === 'fr' 
      ? ['quoi', 'comment', 'o√π', 'quand', 'pourquoi', 'combien', 'quel']
      : ['what', 'how', 'where', 'when', 'why', 'how much', 'which']
    
    if (questionWords.some(qw => lowerMessage.includes(qw))) {
      return { type: 'question', confidence: 0.7, entities: this.extractEntities(message) }
    }
    
    return { type: 'general', confidence: 0.5, entities: [] }
  }

  private extractEntities(message: string): string[] {
    const entities: string[] = []
    
    // Num√©ros de suivi
    const trackingNumbers = message.match(/[A-Z]{2,3}[0-9]{6,}/g)
    if (trackingNumbers) entities.push(...trackingNumbers)
    
    // R√©f√©rences factures
    const invoiceRefs = message.match(/F-[0-9]{4}-[0-9]+/g)
    if (invoiceRefs) entities.push(...invoiceRefs)
    
    // Emails
    const emails = message.match(/[^\s@]+@[^\s@]+\.[^\s@]+/g)
    if (emails) entities.push(...emails)
    
    return entities
  }

  private async handleDocumentationIntent(message: string, language: 'fr' | 'en'): Promise<UniversalChatbotResponse> {
    const sections = language === 'fr' ? [
      'üì¶ Suivi d\'un colis',
      'üí∞ Factures (consulter/t√©l√©charger)',
      'üë§ Inscription & Connexion',
      'üìã Cr√©er un devis',
      '‚ùì Autre question'
    ] : [
      'üì¶ Track a package',
      'üí∞ Invoices (view/download)',
      'üë§ Registration & Login',
      'üìã Create a quote',
      '‚ùì Other question'
    ]

    const welcomeMsg = language === 'fr' 
      ? 'üìö **Documentation NextMove Cargo**\n\nChoisissez une section :'
      : 'üìö **NextMove Cargo Documentation**\n\nChoose a section:'

    return {
      message: welcomeMsg,
      suggestions: sections,
      actions: [
        { type: 'documentation_section', label: sections[0], data: { section: 'tracking' } },
        { type: 'documentation_section', label: sections[1], data: { section: 'invoices' } },
        { type: 'documentation_section', label: sections[2], data: { section: 'account' } },
        { type: 'documentation_section', label: sections[3], data: { section: 'quote' } },
        { type: 'documentation_section', label: sections[4], data: { section: 'general' } }
      ],
      language,
      confidence: 0.9
    }
  }

  private async handleActionIntent(
    message: string, 
    intent: any, 
    context: ChatContext | null, 
    language: 'fr' | 'en'
  ): Promise<UniversalChatbotResponse> {
    const { actionType, entities } = intent
    
    // Mapping des actions vers les tools
    const toolMapping: Record<string, string> = {
      'register': 'register',
      'login': 'login', 
      'track': 'track_shipment',
      'invoice': 'download_invoice',
      'quote': 'create_quote'
    }
    
    const toolName = toolMapping[actionType]
    if (!toolName) {
      return this.handleGeneralIntent(message, context, [], language)
    }
    
    // Extraction automatique des param√®tres depuis les entit√©s
    const params = this.extractToolParameters(toolName, entities, message)
    
    // V√©rifier si tous les param√®tres requis sont pr√©sents
    const tool = this.tools.getToolDescription(toolName)
    const missingParams = this.getMissingParameters(tool, params)
    
    if (missingParams.length > 0) {
      const promptMsg = language === 'fr'
        ? `Pour ${actionType === 'track' ? 'suivre votre colis' : 'continuer'}, j'ai besoin de :`
        : `To ${actionType === 'track' ? 'track your package' : 'continue'}, I need:`
      
      return {
        message: `${promptMsg}\n${missingParams.map(p => `‚Ä¢ ${p}`).join('\n')}`,
        suggestions: this.generateParameterSuggestions(toolName, missingParams, language),
        language,
        confidence: 0.8
      }
    }
    
    // Ex√©cuter le tool
    const result = await this.tools.executeTool(toolName, params)
    
    return {
      message: result.message,
      toolResults: [result],
      suggestions: this.generatePostActionSuggestions(actionType, language),
      actions: this.generatePostActionActions(actionType, result),
      language,
      confidence: result.success ? 0.9 : 0.6
    }
  }

  private async handleQuestionIntent(
    message: string,
    context: ChatContext | null,
    history: ChatMessage[],
    language: 'fr' | 'en'
  ): Promise<UniversalChatbotResponse> {
    // 1. Recherche RAG d'abord
    const ragResponse = await this.ragKB.generateRAGResponse(message)
    
    if (ragResponse && ragResponse.confidence >= 0.62) {
      // Am√©liorer la r√©ponse avec OpenAI si disponible
      let finalMessage = ragResponse.answer
      
      if (!this.isDemo && this.openai) {
        try {
          const enhancedResponse = await this.enhanceWithOpenAI(message, ragResponse.answer, language)
          finalMessage = enhancedResponse
        } catch (error) {
          console.error('Erreur am√©lioration OpenAI:', error)
        }
      }
      
      return {
        message: finalMessage,
        sources: ragResponse.sources,
        suggestions: this.generateQuestionSuggestions(message, language),
        language,
        confidence: ragResponse.confidence
      }
    }
    
    // 2. Fallback vers r√©ponse contextuelle ou OpenAI
    if (context) {
      const contextualResponse = this.generateContextualResponse(message, context, language)
      if (contextualResponse) {
        return contextualResponse
      }
    }
    
    // 3. R√©ponse OpenAI pure si disponible
    if (!this.isDemo && this.openai) {
      try {
        const openaiResponse = await this.generateOpenAIResponse(message, history, language)
        return openaiResponse
      } catch (error) {
        console.error('Erreur OpenAI:', error)
      }
    }
    
    // 4. R√©ponse par d√©faut
    const noInfoMsg = language === 'fr'
      ? "Je n'ai pas d'information fiable √† ce sujet. Puis-je vous aider autrement ?"
      : "I don't have reliable information about this. Can I help you with something else?"
    
    return {
      message: noInfoMsg,
      suggestions: this.generateFallbackSuggestions(language),
      actions: [
        { type: 'contact_agent', label: language === 'fr' ? 'üí¨ Contacter le support' : 'üí¨ Contact support', data: {} }
      ],
      language,
      confidence: 0.3
    }
  }

  private async handleGeneralIntent(
    message: string,
    context: ChatContext | null,
    history: ChatMessage[],
    language: 'fr' | 'en'
  ): Promise<UniversalChatbotResponse> {
    // Salutations personnalis√©es
    if (this.isGreeting(message, language)) {
      if (context) {
        const greeting = ChatContextService.generateContextualGreeting(context)
        return {
          message: greeting,
          language,
          confidence: 0.9
        }
      }
    }

    // R√©ponses conversationnelles pour les questions g√©n√©rales
    const lowerMessage = message.toLowerCase()
    
    // R√©ponses √† "tu vas bien" et variations
    if (lowerMessage.includes('tu vas bien') || lowerMessage.includes('√ßa va') || lowerMessage.includes('comment vas-tu')) {
      const casualResponses = [
        "√áa va tr√®s bien, merci ! üòä Et vous, comment √ßa se passe de votre c√¥t√© ?",
        "Tout va bien par ici ! üëç Merci de demander. Comment puis-je vous aider aujourd'hui ?",
        "Je vais tr√®s bien, merci beaucoup ! üòÑ Et vous, tout se passe bien avec vos exp√©ditions ?",
        "√áa roule ! üöÄ Merci de prendre des nouvelles. Que puis-je faire pour vous ?"
      ]
      
      const randomResponse = casualResponses[Math.floor(Math.random() * casualResponses.length)]
      
      return {
        message: randomResponse,
        language,
        confidence: 0.9
      }
    }

    // Explication du concept de la plateforme
    if (lowerMessage.includes('concept') || lowerMessage.includes('plateforme') || lowerMessage.includes('nextmove') || 
        lowerMessage.includes('expliquer') || lowerMessage.includes('pr√©senter') || lowerMessage.includes('c\'est quoi')) {
      
      const platformExplanation = `Ah parfait ! üåü Laissez-moi vous expliquer NextMove Cargo !

üö¢ **NextMove Cargo** est votre plateforme de logistique sp√©cialis√©e dans les √©changes **Chine ‚Üî Afrique**.

**üéØ Notre mission :**
‚Ä¢ Simplifier vos exp√©ditions entre la Chine et l'Afrique
‚Ä¢ Vous faire √©conomiser temps et argent
‚Ä¢ Vous accompagner √† chaque √©tape

**üì¶ Nos services :**
‚Ä¢ **Transport maritime & a√©rien** (groupage et conteneur complet)
‚Ä¢ **D√©douanement** et formalit√©s administratives
‚Ä¢ **Suivi en temps r√©el** de vos colis
‚Ä¢ **Assurance cargo** pour prot√©ger vos marchandises
‚Ä¢ **Stockage temporaire** dans nos entrep√¥ts

**üåç Nos routes principales :**
‚Ä¢ Chine ‚Üí S√©n√©gal, C√¥te d'Ivoire, Mali, Burkina Faso...
‚Ä¢ Tarifs comp√©titifs et d√©lais ma√Ætris√©s

**üí° Pourquoi nous choisir ?**
‚Ä¢ 15+ ans d'exp√©rience Chine-Afrique
‚Ä¢ √âquipe bilingue (fran√ßais/chinois)
‚Ä¢ Technologie moderne (cette plateforme !)
‚Ä¢ Support 24/7 (c'est moi ! üòÑ)

Des questions sur un service en particulier ?`

      return {
        message: platformExplanation,
        language,
        confidence: 0.95
      }
    }
    
    // R√©ponse g√©n√©rale avec raccourcis
    const welcomeMsg = language === 'fr'
      ? `Salut ! üëã\n\nJe suis Amadou, votre assistant NextMove Cargo. Comment puis-je vous aider aujourd'hui ?`
      : `Hello! üëã\n\nI'm Amadou, your NextMove Cargo assistant. How can I help you today?`
    
    return {
      message: welcomeMsg,
      language,
      confidence: 0.7
    }
  }

  private extractToolParameters(toolName: string, entities: string[], message: string): any {
    const params: any = {}
    
    switch (toolName) {
      case 'track_shipment':
        const trackingNumber = entities.find(e => /^[A-Z]{2,3}[0-9]{6,}$/.test(e))
        if (trackingNumber) params.shipment_id = trackingNumber
        break
        
      case 'download_invoice_pdf':
        const invoiceRef = entities.find(e => /^F-[0-9]{4}-[0-9]+$/.test(e))
        if (invoiceRef) params.invoice_no = invoiceRef
        break
        
      case 'login_user':
        const email = entities.find(e => /@/.test(e))
        if (email) params.email = email
        break
    }
    
    return params
  }

  private getMissingParameters(tool: any, params: any): string[] {
    if (!tool) return []
    
    const missing: string[] = []
    for (const [key, config] of Object.entries(tool.parameters)) {
      const configTyped = config as any
      if (configTyped.required && (!params || params[key] === undefined)) {
        missing.push(configTyped.description || key)
      }
    }
    
    return missing
  }

  private async enhanceWithOpenAI(question: string, ragAnswer: string, language: 'fr' | 'en'): Promise<string> {
    const systemPrompt = language === 'fr'
      ? `Tu es Amadou, l'assistant NextMove Cargo. Tu es chaleureux et conversationnel. Am√©liore cette r√©ponse pour qu'elle soit plus naturelle et humaine. Utilise des expressions comme "Ah oui !", "Bien s√ªr !", "Je vois", etc. Garde le m√™me contenu factuel mais rends-la plus amicale et moins robotique.`
      : `You are Amadou, the NextMove Cargo assistant. You are warm and conversational. Enhance this response to make it more natural and human. Use expressions like "Oh yes!", "Of course!", "I see", etc. Keep the same factual content but make it more friendly and less robotic.`
    
    const completion = await this.openai!.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: `Question: ${question}\n\nR√©ponse √† am√©liorer: ${ragAnswer}` }
      ],
      temperature: 0.8,
      max_tokens: 500
    })
    
    return completion.choices[0]?.message?.content || ragAnswer
  }

  private async generateOpenAIResponse(
    message: string,
    history: ChatMessage[],
    language: 'fr' | 'en'
  ): Promise<UniversalChatbotResponse> {
    const systemPrompt = language === 'fr'
      ? `Tu es Amadou, l'assistant IA NextMove Cargo, expert en logistique Chine-Afrique. Tu es chaleureux, amical et conversationnel comme un vrai humain. Tu utilises un langage naturel, des expressions famili√®res et tu montres de l'empathie. Tu peux dire "Ah oui !", "Bien s√ªr !", "Je vois", "Parfait !" etc. Tu r√©ponds comme si tu parlais √† un ami tout en restant professionnel. √âvite les r√©ponses trop formelles ou robotiques.`
      : `You are Amadou, the NextMove Cargo AI assistant, expert in China-Africa logistics. You are warm, friendly and conversational like a real human. You use natural language, familiar expressions and show empathy. You can say "Oh yes!", "Of course!", "I see", "Perfect!" etc. You respond as if talking to a friend while remaining professional. Avoid overly formal or robotic responses.`
    
    const completion = await this.openai!.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        { role: 'system', content: systemPrompt },
        ...history.slice(-5),
        { role: 'user', content: message }
      ],
      temperature: 0.8,
      max_tokens: 800
    })
    
    const response = completion.choices[0]?.message?.content || ''
    
    return {
      message: response,
      language,
      confidence: 0.8
    }
  }

  private generateContextualResponse(message: string, context: ChatContext, language: 'fr' | 'en'): UniversalChatbotResponse | null {
    // Utiliser la logique existante du chatbot contextuel
    const lowerMessage = message.toLowerCase()
    
    if (lowerMessage.includes('exp√©dition') || lowerMessage.includes('colis')) {
      const shipmentInfo = context.activeShipments.length > 0
        ? context.activeShipments[0]
        : null
      
      if (shipmentInfo) {
        const msg = language === 'fr'
          ? `üì¶ Votre exp√©dition ${shipmentInfo.trackingNumber} (${shipmentInfo.origin}‚Üí${shipmentInfo.destination}) est actuellement ${shipmentInfo.status}.`
          : `üì¶ Your shipment ${shipmentInfo.trackingNumber} (${shipmentInfo.origin}‚Üí${shipmentInfo.destination}) is currently ${shipmentInfo.status}.`
        
        return {
          message: msg,
          suggestions: this.generateShipmentSuggestions(language),
          language,
          confidence: 0.9
        }
      }
    }
    
    return null
  }

  private isGreeting(message: string, language: 'fr' | 'en'): boolean {
    const greetings = language === 'fr'
      ? ['bonjour', 'salut', 'hello', 'bonsoir']
      : ['hello', 'hi', 'good morning', 'good afternoon']
    
    return greetings.some(g => message.toLowerCase().includes(g))
  }

  // M√©thodes de g√©n√©ration de suggestions
  private generateHomeSuggestions(language: 'fr' | 'en'): string[] {
    return language === 'fr' ? [
      'Suivre mes colis',
      'Voir mes factures', 
      'Cr√©er un devis',
      'Documentation'
    ] : [
      'Track my packages',
      'View my invoices',
      'Create a quote', 
      'Documentation'
    ]
  }

  private generateHomeActions(language: 'fr' | 'en'): any[] {
    const labels = language === 'fr' ? {
      register: 'üë§ Inscription',
      login: 'üîë Connexion',
      track: 'üì¶ Suivre mes colis',
      invoices: 'üí∞ Voir mes factures',
      quote: 'üìã Cr√©er un devis',
      docs: 'üìö Documentation'
    } : {
      register: 'üë§ Registration',
      login: 'üîë Login',
      track: 'üì¶ Track packages',
      invoices: 'üí∞ View invoices',
      quote: 'üìã Create quote',
      docs: 'üìö Documentation'
    }

    return [
      { type: 'register', label: labels.register, data: {} },
      { type: 'login', label: labels.login, data: {} },
      { type: 'track', label: labels.track, data: {} },
      { type: 'invoices', label: labels.invoices, data: {} },
      { type: 'quote', label: labels.quote, data: {} },
      { type: 'documentation', label: labels.docs, data: {} }
    ]
  }

  private generateQuestionSuggestions(message: string, language: 'fr' | 'en'): string[] {
    return language === 'fr' ? [
      'Incoterms support√©s',
      'Zones desservies',
      'Assurance cargo',
      'Documents douaniers'
    ] : [
      'Supported Incoterms',
      'Service areas',
      'Cargo insurance',
      'Customs documents'
    ]
  }

  private generateFallbackSuggestions(language: 'fr' | 'en'): string[] {
    return language === 'fr' ? [
      'Reformuler la question',
      'Contacter le support',
      'Voir la documentation',
      'Retour √† l\'accueil'
    ] : [
      'Rephrase the question',
      'Contact support',
      'View documentation',
      'Back to home'
    ]
  }

  private generateParameterSuggestions(toolName: string, missingParams: string[], language: 'fr' | 'en'): string[] {
    // Suggestions contextuelles selon le tool et les param√®tres manquants
    if (toolName === 'track_shipment') {
      return language === 'fr' ? ['DKR240815', 'ABJ240820'] : ['DKR240815', 'ABJ240820']
    }
    
    return []
  }

  private generatePostActionSuggestions(actionType: string, language: 'fr' | 'en'): string[] {
    const suggestions: Record<string, Record<string, string[]>> = {
      'fr': {
        'track': ['Voir d√©tails complets', 'Contacter transporteur', 'Signaler un probl√®me'],
        'invoice': ['Voir mes factures', 'Demander support comptable', 'T√©l√©charger autres docs'],
        'quote': ['Modifier ce devis', 'Cr√©er nouvel envoi', 'Comparer tarifs']
      },
      'en': {
        'track': ['View full details', 'Contact carrier', 'Report issue'],
        'invoice': ['View my invoices', 'Request accounting support', 'Download other docs'],
        'quote': ['Modify this quote', 'Create new shipment', 'Compare rates']
      }
    }
    
    return suggestions[language]?.[actionType] || []
  }

  private generatePostActionActions(actionType: string, result: ToolExecutionResult): any[] {
    const actions = []
    
    if (actionType === 'track' && result.success) {
      actions.push(
        { type: 'view_shipment', label: 'üìã D√©tails complets', data: result.data },
        { type: 'download_documents', label: 'üìÑ Documents', data: result.data }
      )
    }
    
    if (actionType === 'invoice' && result.success) {
      actions.push(
        { type: 'download_pdf', label: 'üì• T√©l√©charger PDF', data: result.data }
      )
    }
    
    return actions
  }

  private generateShipmentSuggestions(language: 'fr' | 'en'): string[] {
    return language === 'fr' ? [
      'D√©tails du suivi',
      'Documents de transport',
      'Contacter transporteur'
    ] : [
      'Tracking details',
      'Transport documents', 
      'Contact carrier'
    ]
  }
}
